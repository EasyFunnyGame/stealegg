#if IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302 // Auto generated by AddMacroForInstantGameFiles.exe

using System.Collections.Generic;
using Unity.AutoStreaming.CloudContentDelivery;
using UnityEditor;
using UnityEngine;

namespace Unity.AutoStreaming
{
    internal struct SimpleBadge
    {
        public string Name { get; set; }
        public string ReleaseId { get; set; }
        public bool Locked { get; set; }
    }

    internal struct SimpleBucket
    {
        public string Name { get; set; }
        public string Id { get; set; }
    }

    internal class SimpleProject
    {
        public string Guid { get; set; }
        public string CosKey { get; set; }
    }

    internal static class ASCCDHelper
    {
        internal static SimpleBucket[] LoadBuckets()
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return null;

            Bucket[] buckets = Bucket.LoadBuckets(CosKey);
            if (buckets == null)
                return null;

            SimpleBucket[] smbuckets = new SimpleBucket[buckets.Length];
            for (int i = 0; i < buckets.Length; i++)
            {
                smbuckets[i].Id = buckets[i].id;
                smbuckets[i].Name = buckets[i].name;
            }
            return smbuckets;
        }

        internal static void CreateBucket(string bucketName, string des)
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return;

            Bucket.CreateBucket(CosKey, bucketName, des);
        }

        internal static SimpleBadge[] LoadBadges()
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return null;

            if (string.IsNullOrEmpty(BucketUuid))
                return null;

            Badge[] badges = Badge.LoadBadges(CosKey, BucketUuid);
            if (badges == null)
                return null;

            SimpleBadge[] smBadges = new SimpleBadge[badges.Length];
            for (int i = 0; i < badges.Length; i++)
            {
                smBadges[i].Name = badges[i].name;
                smBadges[i].ReleaseId = badges[i].releaseid;
                smBadges[i].Locked = badges[i].islocked.Equals("true");
            }
            return smBadges;
        }

        internal static void LockBadge(string badgeName, string releaseId, bool toLock)
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return;

            if (string.IsNullOrEmpty(BucketUuid))
                return;

            Badge.LockBadge(CosKey, BucketUuid, badgeName, releaseId, toLock);
        }

        internal static string GetLatestReleaseId()
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return null;

            if (string.IsNullOrEmpty(BucketUuid))
                return null;

            Badge[] badges = Badge.LoadBadges(CosKey, BucketUuid);
            if (badges == null)
                return null;


            for (int i = 0; i < badges.Length; i++)
            {
                if (badges[i].name.Equals("latest"))
                    return badges[i].releaseid;
            }
            return null;
        }

        internal static bool SyncEntries(List<System.Tuple<CCDResourceType, string>> toBeUploaded)
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(BucketUuid))
                return false;

            return Entry.SyncEntries(ProjectGuid, CosKey, BucketUuid, toBeUploaded);
        }

        internal static string CreateRelease(string des)
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return null;

            return Release.CreateRelease(CosKey, BucketUuid, des);
        }

        internal static void CreateOrUpdateBadge(string badgeName, string releaseid)
        {
            if (string.IsNullOrEmpty(CosKey) || string.IsNullOrEmpty(ProjectGuid))
                return;

            Badge.CreateOrUpdateBadge(CosKey, BucketUuid, badgeName, releaseid);
        }

        internal static SimpleProject LoadProject()
        {
            if (string.IsNullOrEmpty(InstantGameAppId))
                return null;

            Project project = Project.LoadProject(InstantGameAppId);
            if (project != null)
            {
                SimpleProject smProject = new SimpleProject();
                smProject.Guid = project.ProjectUUID;
                smProject.CosKey = project.Key;
                return smProject;
            }
            return null;
        }

        internal static bool IsAnOnlineVersion(string badgeName, out string tagStr)
        {
            if (BucketUuid.Equals(ByteDanceVersions.CurrentVersion.bucketUuid) && badgeName.Equals(ByteDanceVersions.CurrentVersion.badgeName))
            {
                tagStr = "- 字节上线版本";
                if (badgeName.Equals("latest"))
                    tagStr += "- 警告：latest badge不应作为上线版本使用";
                return true;
            }

            if (BucketUuid.Equals(ByteDanceVersions.AuditVersion.bucketUuid) && badgeName.Equals(ByteDanceVersions.AuditVersion.badgeName))
            {
                tagStr = "- 字节提审版本";
                if (badgeName.Equals("latest"))
                    tagStr += "- 警告：latest badge不应作为提审版本使用";

                return true;
            }

            if (BucketUuid.Equals(ByteDanceVersions.LatestVersion.bucketUuid) && badgeName.Equals(ByteDanceVersions.LatestVersion.badgeName))
            {
                tagStr = "- 字节测试版本";
                if (badgeName.Equals("latest"))
                    tagStr += "- 提示：latest badge不能转为提审和上线版本，请注意更换badge";
                return false;
            }

            tagStr = string.Empty;
            return false;
        }

        public static string InstantGameAppId
        {
            get
            {
                return PlayerSettings.instantGameAppId;
            }
            internal set
            {
                PlayerSettings.instantGameAppId = value;
            }
        }

        internal static string TtAppid
        {
            get
            {
                return AutoStreamingSettings.GetTtAppid();
            }

            set
            {
                AutoStreamingSettings.SetTtAppid(value);
            }
        }

        internal static string TargetPlatform
        {
            get
            {
                #if UNITY_ANDROID
                return AutoStreamingSettings.GetTargetPlaftorm();
                #else
                return "";
                #endif
            }

            set
            {
                AutoStreamingSettings.SetTargetPlaftorm(value);
            }
        }

        internal static string CosKey
        {
            get
            {
                return AutoStreamingSettings.GetCosKey();
            }
            set
            {
                AutoStreamingSettings.SetCosKey(value);
            }
        }

        internal static string ProjectGuid
        {
            get
            {
                return AutoStreamingSettings.GetProjectGuid();
            }
            set
            {
                AutoStreamingSettings.SetProjectGuid(value);
            }
        }

        internal static string BucketUuid
        {
            get
            {
                return AutoStreamingSettings.GetBucketUuid();
            }
            set
            {
                AutoStreamingSettings.SetBucketUuid(value);
            }
        }

        internal static string BucketName
        {
            get
            {
                return AutoStreamingSettings.GetBucketName();
            }
            set
            {
                AutoStreamingSettings.SetBucketName(value);
            }
        }

        internal static string BadgeName
        {
            get
            {
                return AutoStreamingSettings.GetBadgeName();
            }
            set
            {
                AutoStreamingSettings.SetBadgeName(value);
            }
        }

        internal static string CCDInstanceId
        {
            get
            {
                return string.Format("https://assetstreaming-content.unity.cn/client_api/v1/buckets/{0}/release_by_badge/{1}/content", ASCCDHelper.BucketUuid, ASCCDHelper.BadgeName);
            }
        }


        internal static string AutoStreamingPath 
        {
            get 
            {
#if IG_C301
                string host = PlayerSettings.compressedCloudAssets ? "https://assetstreaming-wg-content.unity.cn" : "https://assetstreaming-content.unity.cn";
#else
                string host = "https://assetstreaming-content.unity.cn";
#endif
                return string.Format("{0}/client_api/v1/buckets/{1}/release_by_badge/{2}/content",host, ASCCDHelper.BucketUuid, ASCCDHelper.BadgeName);
            }
        }
    }
}

#endif  // IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302, Auto generated by AddMacroForInstantGameFiles.exe
