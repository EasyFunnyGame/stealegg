#if IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302 // Auto generated by AddMacroForInstantGameFiles.exe

using System.IO;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.Build.Reporting;
using UnityEditor.Build;
using UnityEngine;
using UnityEditor.UnityLinker;
using System.Text;

namespace Unity.AutoStreaming
{
    internal class ASBuildConstants
    {
        internal const int k_CallbackOrder = 1;

        public static readonly string k_TextureABPath = AutoStreamingSettings.autoStreamingDirectory + "/TextureABs";
        public static readonly string k_SceneABPath = AutoStreamingSettings.autoStreamingDirectory + "/SceneABs";
        public static readonly string k_MeshABPath = AutoStreamingSettings.autoStreamingDirectory + "/MeshRes";
        public static readonly string k_AudioABPath = AutoStreamingSettings.autoStreamingDirectory + "/AudioRes";
        public static readonly string k_AnimationABPath = AutoStreamingSettings.autoStreamingDirectory + "/AnimRes";
        public static readonly string k_FontABPath = AutoStreamingSettings.autoStreamingDirectory + "/FontRes";

        //static readonly string k_AddressabeAssetsSrcPath = "ServerData/" +
        //    BuildPipeline.GetBuildTargetName(EditorUserBuildSettings.activeBuildTarget);

        public static readonly string k_AddressabeAssetsPath = AutoStreamingSettings.autoStreamingDirectory + "/Addressable";
        public static readonly string k_CustomCloudAssetsPath = Application.dataPath + "/../CustomCloudAssets";
        public static readonly string k_CloudABPath = Application.dataPath + "/../CustomCloudAssets/CloudAB";

    }

    class ASUnityLinkerProcessor : IUnityLinkerProcessor
    {
        public int callbackOrder => 1;

        private static string strLinkXml =
@"<linker>
    <assembly fullname=""UnityEngine.AutoStreamingModule"">
        <type fullname=""UnityEngine.AutoStreaming"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine.AssetBundleModule"">
        <type fullname=""UnityEngine.AssetBundle"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine.JSONSerializeModule"">
        <type fullname=""UnityEngine.JsonUtility"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine.UnityWebRequestModule"">
        <type fullname=""UnityEngine.Networking.UnityWebRequest"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine"">
        <type fullname=""UnityEngine.GameObject"" preserve=""all"" />
    </assembly>
    <assembly fullname=""Unity.Timeline"">
        <type fullname=""UnityEngine.Timeline.TimelineAsset"" preserve=""all"" />
    </assembly>
</linker>
";

        public string GenerateAdditionalLinkXmlFile(BuildReport report, UnityEditor.UnityLinker.UnityLinkerBuildPipelineData data)
        {
            if (!PlayerSettings.autoStreaming)
                return null;

            if (!Directory.Exists(AutoStreamingSettings.autoStreamingDirectory))
                Directory.CreateDirectory(AutoStreamingSettings.autoStreamingDirectory);

            var path = Path.Combine(AutoStreamingSettings.autoStreamingDirectory, "AS_Module_Preserve.xml");
            path = Path.GetFullPath(path);
            File.WriteAllText(path, strLinkXml);
            return path;
        }

#if !UNITY_2021_2_OR_NEWER
        void IUnityLinkerProcessor.OnAfterRun(BuildReport report, UnityLinkerBuildPipelineData data)
        {
            var path = Path.Combine(AutoStreamingSettings.autoStreamingDirectory, "AS_Module_Preserve.xml");
            if (File.Exists(path))
                File.Delete(path);
        }

        void IUnityLinkerProcessor.OnBeforeRun(BuildReport report, UnityLinkerBuildPipelineData data)
        {
        }

#endif
    }

    internal class ASBuildPostprocessor : IPostprocessBuildWithReport
    {
        public int callbackOrder { get { return ASBuildConstants.k_CallbackOrder; } }

        public void OnPostprocessBuild(BuildReport report)
        {
            if (!PlayerSettings.autoStreaming)
                return;

            PrepareOutputDirectory(report);

            // Copy to "Library/AutoStreamingCache" folder.
            // CopyAddressableDataIfNeeded(k_AddressabeAssetsPath);
        }

        internal void PrepareOutputDirectory(BuildReport report)
        {
            //if (Directory.Exists(k_AddressabeAssetsPath))
            //    NewCleanDirectory(k_AddressabeAssetsPath, report.summary.outputPath);

            //offer a place for user to manually copy video file to here
            if (!Directory.Exists(ASBuildConstants.k_CustomCloudAssetsPath))
            {
                Directory.CreateDirectory(ASBuildConstants.k_CustomCloudAssetsPath);
            }
        }

        internal static void NewCleanDirectory(string dirPath, string outputPath, HashSet<string> keepSubdir = null)
        {
            if (Directory.Exists(dirPath))
            {
                DirectoryInfo di = new DirectoryInfo(dirPath);
                foreach (FileInfo file in di.GetFiles())
                {
                    if (!file.FullName.Equals(Path.GetFullPath(outputPath)))
                        file.Delete();
                }

                foreach (DirectoryInfo dir in di.GetDirectories())
                {
                    if (keepSubdir == null || !keepSubdir.Contains(dir.Name))
                    {
                        dir.Delete(true);
                    }
                }
            }
            else
            {
                Directory.CreateDirectory(dirPath);
            }
        }

        private void CopyAddressableDataIfNeeded(string srcDir)
        {
            if (!Directory.Exists(srcDir))
                return;

            // TODOVZ: Need to figure out a way to get the addressable assets output path.
            string settingPath = "IGOutput/first/assets/aa/" +
                BuildPipeline.GetBuildTargetName(EditorUserBuildSettings.activeBuildTarget) +
                "/settings.json";

            if (File.Exists(settingPath))
            {
                string json = File.ReadAllText(settingPath);

                //check if addressable remote load path is set equal to ccdId
                string ccdId = ASCCDHelper.CCDInstanceId;
                json = json.Substring(json.IndexOf("m_InternalId") + 15, ccdId.Length);
                if (json.Equals(ccdId))
                {
                    Debug.Log("Addressable RemoteLoadPath matchs CCDInstanceId, copy addressables data from " + srcDir + " to " + ASBuildConstants.k_AddressabeAssetsPath);
                    DirectoryInfo root = new DirectoryInfo(srcDir);
                    FileInfo[] files = root.GetFiles();
                    foreach (FileInfo file in files)
                    {
                        File.Copy(srcDir + "/" + file.Name, ASBuildConstants.k_AddressabeAssetsPath + "/" + file.Name);
                    }
                }
            }
        }
    }
}

#endif  // IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302, Auto generated by AddMacroForInstantGameFiles.exe
