#if IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302 // Auto generated by AddMacroForInstantGameFiles.exe

using UnityEngine;
using COSXML;
using COSXML.Utils;
using System.Net;
using System;
using System.IO;
using UnityEditor;
using COSXML.Auth;
using COSXML.Model.Object;

namespace Unity.AutoStreaming.CloudContentDelivery
{
    internal class CosUtil
    {
        private static CosXml cosXml;
        private static string lastAuthCosKey;
        internal static CosXml GetCosXml(string cosKey)
        {
            if (TemporaryAuthHelper.IsNearExpired() || lastAuthCosKey != cosKey)
            {
                TemporaryAuthHelper.refreshAuth(cosKey);


                CosXmlConfig config = new CosXmlConfig.Builder()
                    .SetConnectionTimeoutMs(60000)
                    .SetReadWriteTimeoutMs(40000)
                    .IsHttps(true)
                    .SetAppid(CCDInfo.CosAppId)
                    .SetRegion(CCDInfo.CosRegion)
                    .Build();

                DefaultSessionQCloudCredentialProvider qCloudCredentialProvider = new DefaultSessionQCloudCredentialProvider(
                    TemporaryAuthHelper.tempAuth.tmpId
                    , TemporaryAuthHelper.tempAuth.tmpKey
                    , TemporaryAuthHelper.tempAuth.expiredTime
                    , TemporaryAuthHelper.tempAuth.tmpToken);

                cosXml = new CosXmlServer(config, qCloudCredentialProvider);
                lastAuthCosKey = cosKey;
            }
            return cosXml;
        }

        internal static bool UploadSingle(string cosKey, string objectKey, string srcPath)
        {
            try
            {
                PutObjectRequest request = new PutObjectRequest(CCDInfo.CosBucket, objectKey, srcPath);
                request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
                PutObjectResult result = GetCosXml(cosKey).PutObject(request);
                return result.httpCode == 200;
            }
            catch (COSXML.CosException.CosClientException clientEx)
            {
                Debug.LogError("CosClientException: " + clientEx);
            }
            catch (COSXML.CosException.CosServerException serverEx)
            {
                Debug.LogError("CosServerException: " + serverEx.GetInfo());
            }
            catch (Exception e)
            {
                Debug.LogError("CosServerException: " + e.Message);
            }
            return false;
        }
    }

    [Serializable]
    internal class TemporaryAuth
    {
        public string tmpId;
        public string tmpKey;
        public string tmpToken;
        public long startTime;
        public long expiredTime;
    }

    internal class TemporaryAuthHelper
    {
        public static TemporaryAuth tempAuth = null;
        public static bool IsNearExpired()
        {
            return tempAuth == null || TimeUtils.GetCurrentTime(TimeUnit.SECONDS) >= tempAuth.expiredTime - 120;
        }

        public static void refreshAuth(string cosKey)
        {
            try
            {
                string url = string.Format("{0}api/v1/users/me/temporaryAuth", CCDInfo.ApiHost);
                using (HttpWebResponse resp = (HttpWebResponse)Util.GetHttpWebRequest4CCDThreaded(cosKey, url, "GET").GetResponse())
                {
                    if (resp.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        string strJson;
                        using (Stream stream = resp.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(stream))
                            {
                                strJson = reader.ReadToEnd();
                            }
                        }
                        tempAuth = JsonUtility.FromJson<TemporaryAuth>(strJson);
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Failed to refresh TemporaryAuth", e.Message, "OK");
            }
        }
    }
}

#endif  // IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302, Auto generated by AddMacroForInstantGameFiles.exe
