#if IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302 // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.IO;
using System.Net;
using UnityEditor;
using UnityEngine;

namespace Unity.AutoStreaming.CloudContentDelivery
{
    [Serializable]
    internal class Bucket
    {
        public string description;
        public string id;
        public string name;
        public string projectguid;

        public static Bucket[] LoadBuckets(string cosKey)
        {
            string url = string.Format("{0}api/v1/buckets/?page={1}&per_page={2}", CCDInfo.ApiHost, 1, 1000);

            try
            {
                using (HttpWebResponse resp = (HttpWebResponse)Util.GetHttpWebRequest4CCDThreaded(cosKey, url, "GET").GetResponse())
                {
                    if (resp.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        string strJson;
                        using (Stream stream = resp.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(stream))
                            {
                                strJson = reader.ReadToEnd();
                            }
                        }
                        return JsonUtility.FromJson<BucketsRoot>("{\"Buckets\":" + strJson + "}").Buckets;
                    }
                    else
                    {
                        Debug.LogError(string.Format("Failed loading Buckets."));
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Load Buckets Error", e.Message, "OK");
            }
            return null;
        }

        public static void CreateBucket(string cosKey, string bucketName, string description)
        {
            if (string.IsNullOrEmpty(bucketName))
            {
                return;
            }
            string url = string.Format("{0}api/v1/buckets/", CCDInfo.ApiHost);
            string desStr = "";

            if (!string.IsNullOrEmpty(description))
            {
                desStr = ", \"description\": \"" + description + "\" ";
            }
            string requestBody = "{\"name\": \"" + bucketName + "\" " + desStr + "}";

            try
            {
                using (HttpWebResponse response = (HttpWebResponse)Util.GetHttpWebRequest4CCDThreaded(cosKey, url, "POST", requestBody).GetResponse())
                {
                    if (response.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        Debug.Log(string.Format("Create bucket : {0} Success.", bucketName));
                    }
                    else
                    {
                        Debug.Log(string.Format("Failed creating bucket : {0}", bucketName));
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Create Bucket Error", e.Message, "OK");
            }
        }

        public static void DeleteBucket(string cosKey, string bucketUuid)
        {
            if (string.IsNullOrEmpty(bucketUuid))
            {
                return;
            }
            string url = string.Format("{0}api/v1/buckets/{1}", CCDInfo.ApiHost, bucketUuid);
            try
            {
                using (HttpWebResponse response = (HttpWebResponse)Util.GetHttpWebRequest4CCDThreaded(cosKey, url, "DELETE").GetResponse())
                {
                    if (response.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        Debug.Log(string.Format("Delete bucket : {0} Success.", bucketUuid));
                    }
                    else
                    {
                        Debug.Log(string.Format("Failed deleting bucket : {0}", bucketUuid));
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Delete Bucket Error", e.Message, "OK");
            }
        }
    }

    [Serializable]
    internal class BucketsRoot
    {
        public Bucket[] Buckets;
    }
}

#endif  // IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302, Auto generated by AddMacroForInstantGameFiles.exe
