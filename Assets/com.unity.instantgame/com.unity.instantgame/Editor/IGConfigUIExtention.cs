#if IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302 // Auto generated by AddMacroForInstantGameFiles.exe

using UnityEditor;
using UnityEngine;
using Unity.AutoStreaming;
using Unity.AutoStreaming.CloudContentDelivery;
using System.Collections.Generic;
using static UnityEditor.BuildPlayerWindow;
using System;
using System.IO;
using UnityEditor.Build.Reporting;

namespace Unity.InstantGame
{
    internal class IGConfigUIExtension
    {
        private static Action<BuildPlayerOptions> buildPlayerHandler;
        static readonly GUIContent k_IGBuildUIContent = new GUIContent("Build Instant Game", "Build the project in Instant Game way.");

#if UNITY_ANDROID
        private Texture2D m_QRTexture2D = null;
        static readonly GUIContent k_IGTargetUIContent = new GUIContent("Minigame Platform", "Select a minigame platform to build instantgame.");
        int m_SelectedPlatfomIndex = 0;
        internal static string m_SelectedPlatfomName = "";
        readonly string[] platforms = {"Bytedance", "Kwai", "Mobile QQ" };
#endif
        public IGConfigUIExtension(ASConfigUI autoStreamingConfigUI)
        {
            autoStreamingConfigUI.OnBuildInstantGameGUI += OnBuildInstantGameGUI;
            autoStreamingConfigUI.OnInstantGameStatsGUI += OnInstantGameStatsGUI;

            autoStreamingConfigUI.BeforeCCDUpload += BeforeCCDUpload;
            autoStreamingConfigUI.BuildInstantGame += BuildInstantGame;
            autoStreamingConfigUI.OnCCDInstantIdChanged += OnCCDInstantIdChanged;
#if UNITY_ANDROID
            autoStreamingConfigUI.OnConfigMiniGamePlatformGUI += OnConfigMiniGamePlatformGUI;
            autoStreamingConfigUI.OnQRCodeGUI += OnQRCodeGUI;

            //ApplyRecommendedSettingsforPlatform(ASCCDHelper.TargetPlatform);
            for (int i = 0; i < platforms.Length; ++i)
            {
                if (platforms[i] == ASCCDHelper.TargetPlatform)
                {
                    m_SelectedPlatfomIndex = i;
                }
            }
#endif
        }

        public static void RegisterBuildPlayerHandler(Action<BuildPlayerOptions> func)
        {
            // Display a warning if user scripts try to register this delegate multiple times
            if (func != null && buildPlayerHandler != null)
                Debug.LogWarning("The build player handler in BuildPlayerWindow is being reassigned!");

            buildPlayerHandler = func;
        }

        internal void OnConfigMiniGamePlatformGUI()
        {
#if UNITY_ANDROID
            m_SelectedPlatfomIndex = EditorGUILayout.Popup(k_IGTargetUIContent, m_SelectedPlatfomIndex, platforms);
            m_SelectedPlatfomName = platforms[m_SelectedPlatfomIndex];
            if (m_SelectedPlatfomName != ASCCDHelper.TargetPlatform && PlayerSettings.autoStreaming)
            {
                ApplyRecommendedSettingsforPlatform(m_SelectedPlatfomName);
                ASCCDHelper.TargetPlatform = m_SelectedPlatfomName;
                Debug.Log("InstantGame: Successfully switch instantgame build target to " + m_SelectedPlatfomName + " platform.");
                GUIUtility.ExitGUI();
            }
            if (GUILayout.Button("Apply recommended PlayerSettings for " + m_SelectedPlatfomName + " minigame platform"))
            {
                ApplyRecommendedSettingsforPlatform(m_SelectedPlatfomName);
            }
#endif
        }

        internal void OnBuildInstantGameGUI()
        {
            if (GUILayout.Button(k_IGBuildUIContent))
            {
                if (string.IsNullOrEmpty(ASCCDHelper.BucketUuid) || string.IsNullOrEmpty(ASCCDHelper.BucketName) || string.IsNullOrEmpty(ASCCDHelper.BadgeName))
                {
                    EditorUtility.DisplayDialog("Build Failed", "Please select a bucket/badge to use before build instantgame", "OK");
                    return;
                }

                BuildInstantGame(true);
#if UNITY_ANDROID
                IGStartupFiles.RefreshInfo();
#endif
                StreamingFiles.RefreshInfo();
                GUIUtility.ExitGUI();
            }
        }

        internal void OnInstantGameStatsGUI()
        {
#if UNITY_ANDROID
            GUILayout.BeginHorizontal();
            GUILayout.Space(20);
            EditorGUILayout.TextArea(string.Format("{0}:  {1}  ({2}: {3}    {4}: {5}    {6}: {7}    {8}: {9})"
                , "Startup Size", EditorUtility.FormatBytes(IGStartupFiles.startup_size)
                , "First", EditorUtility.FormatBytes(IGStartupFiles.first_size)
                , "Game Res", EditorUtility.FormatBytes(IGStartupFiles.gameres_size)
                , "Game Lib", EditorUtility.FormatBytes(IGStartupFiles.gamelib_size)
                , "Engine", EditorUtility.FormatBytes(IGStartupFiles.engine_size)
                ), new GUIStyle { normal = new GUIStyleState { textColor = Color.white }, wordWrap = true });
            GUILayout.EndHorizontal();
#endif
        }

        void ApplyRecommendedSettingsforPlatform(string platform)
        {
            switch (platform)
            {
                case "Bytedance":
                    ApplyIl2cppRecommendedSettings();
                    break;

                case "Kwai":
                case "Mobile QQ":
                    ApplyMonoRecommendedSettings();
                    break;
            }
        }

        void ApplyIl2cppRecommendedSettings()
        {
            // set ScriptingBackend to il2cpp;
            PlayerSettings.SetScriptingBackend(BuildTargetGroup.Android, ScriptingImplementation.IL2CPP);

            //set build target to both armv7 and arm64
            PlayerSettings.Android.targetArchitectures = AndroidArchitecture.ARM64 | AndroidArchitecture.ARMv7;

            //Enable stripEngineCode
            PlayerSettings.stripEngineCode = true;

            //set graphics api to gles3
            //var apis = new GraphicsDeviceType[1];
            //apis[0] = GraphicsDeviceType.OpenGLES3;
            //PlayerSettings.SetGraphicsAPIs(BuildTarget.Android, apis);
            //PlayerSettings.SetUseDefaultGraphicsAPIs(BuildTarget.Android, false);

            //disable static batching
            int sta, dym;
            PlayerSettings.GetBatchingForPlatform(BuildTarget.Android, out sta, out dym);
            PlayerSettings.SetBatchingForPlatform(BuildTarget.Android, 0, dym);

            //set compresion method to Lz4HC
            EditorUserBuildSettings.SetCompressionType(BuildTargetGroup.Android, Compression.Lz4HC);
        }

        void ApplyMonoRecommendedSettings()
        {
            // set ScriptingBackend to mono;
            PlayerSettings.SetScriptingBackend(BuildTargetGroup.Android, ScriptingImplementation.Mono2x);

            //set build target to both armv7 and arm64
            PlayerSettings.Android.targetArchitectures = AndroidArchitecture.ARM64 | AndroidArchitecture.ARMv7;

            // set Api Compatibility Level to .NET 4.x
            //var targetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);
            //PlayerSettings.SetApiCompatibilityLevel(targetGroup, ApiCompatibilityLevel.NET_4_6);

            //disable stripEngineCode
            PlayerSettings.stripEngineCode = false;

            //set graphics api to gles3
            //var apis = new GraphicsDeviceType[1];
            //apis[0] = GraphicsDeviceType.OpenGLES3;
            //PlayerSettings.SetGraphicsAPIs(BuildTarget.Android, apis);
            //PlayerSettings.SetUseDefaultGraphicsAPIs(BuildTarget.Android, false);

            //disable static batching
            int sta, dym;
            PlayerSettings.GetBatchingForPlatform(BuildTarget.Android, out sta, out dym);
            PlayerSettings.SetBatchingForPlatform(BuildTarget.Android, 0, dym);

            //set compresion method to Lz4HC
            EditorUserBuildSettings.SetCompressionType(BuildTargetGroup.Android, Compression.Lz4HC);
        }

        bool BuildInstantGame(bool showBuiltPlayer)
        {
            if (string.IsNullOrEmpty(ASCCDHelper.CosKey) || string.IsNullOrEmpty(ASCCDHelper.ProjectGuid))
            {
                EditorUtility.DisplayDialog("Build Failed", "Please use a valide InstantgameAppid ", "OK");
                return false;
            }

#if UNITY_ANDROID
            if (!Directory.Exists(Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir))
                Directory.CreateDirectory(Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir);

            var tempApkPath = Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir + "/" + IGBuildConstants.k_ApkName;
            EditorUserBuildSettings.SetBuildLocation(BuildTarget.Android, tempApkPath);
#endif
            try
            {
                BuildPlayerOptions buildPlayerOptions = new BuildPlayerOptions();
                buildPlayerOptions = DefaultBuildMethods.GetBuildPlayerOptionsInternal(EditorUserBuildSettings.activeBuildTarget != BuildTarget.Android, buildPlayerOptions);
                if (showBuiltPlayer)
                    buildPlayerOptions.options |= BuildOptions.ShowBuiltPlayer;

                if (buildPlayerHandler != null)
                {
                    buildPlayerHandler(buildPlayerOptions);
                }
                else
                {
                    BuildReport report = IGBuildPipeline.BuildPlayer(buildPlayerOptions);
                    if (report == null || report.summary.result != BuildResult.Succeeded)
                        return false;
                }
                return true;
            }
            catch (Exception e)
            {
                if (!string.IsNullOrEmpty(e.Message))
                    Debug.LogError(e);
                return false;
            }
        }

        internal void BeforeCCDUpload(List<System.Tuple<CCDResourceType, string>> toBeUploaded)
        {
            toBeUploaded?.Add(System.Tuple.Create(CCDResourceType.InstantGame, IGBuildConstants.k_OutputDir));
        }


        internal void OnCCDInstantIdChanged()
        {
#if UNITY_ANDROID
            if (string.IsNullOrEmpty(ASCCDHelper.BucketUuid) || string.IsNullOrEmpty(ASCCDHelper.BadgeName))
                return;
            if (m_QRTexture2D != null)
            {
                UnityEngine.Object.DestroyImmediate(m_QRTexture2D);
                m_QRTexture2D = null;
            }

            var CCDInstantId = ASCCDHelper.CCDInstanceId;
            m_QRTexture2D = IGQRCodeGenerator.GenerateQRCodeTexture(CCDInstantId + "/" + IGBuildConstants.k_IGJsonFileName);
#endif
        }

#if UNITY_ANDROID
        public void OnQRCodeGUI()
        {
            if (m_QRTexture2D == null)
            {
                if (string.IsNullOrEmpty(ASCCDHelper.BucketUuid) || string.IsNullOrEmpty(ASCCDHelper.BadgeName))
                    return;
                m_QRTexture2D = IGQRCodeGenerator.GenerateQRCodeTexture(ASCCDHelper.CCDInstanceId + "/" + IGBuildConstants.k_IGJsonFileName);
            }

            GUILayout.BeginVertical();
            GUILayout.Space(10);
            GUILayout.Label("Scan the following QR code with MegaApp for testing:");
            GUILayout.Space(10);
            GUILayout.Space(10);

            if (Event.current.type == EventType.Repaint)
            {
                Rect lastRect = GUILayoutUtility.GetLastRect();
                lastRect.x += 70;
                lastRect.width = 150;
                lastRect.height = 150;
                Graphics.DrawTexture(lastRect, m_QRTexture2D);
            }

            GUILayout.EndVertical();
        }
#endif
    }
}

#endif  // IG_C106 || IG_C109 || IG_C201 || IG_C301 || IG_C302, Auto generated by AddMacroForInstantGameFiles.exe
